/*
 * FHIRWork (c)
 *
 * This work is licensed under the Creative Commons Attribution 4.0
 * International License. To view a copy of this license, visit
 *
 *      http://creativecommons.org/licenses/by/4.0/
 *
 * Author: Blair Butterworth
 * Author: Didac Magrina
 * Author: Koon Wei Teo
 * Author: Evanthia Tingiri
 * Author: Shruti Sinha
 * Author: Yuan wei
 */

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.akhikhl.gretty:gretty:2.0.0'
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

gretty {
    contextPath = '/'
    httpPort = 8090
}

war {
    baseName = 'fhirconverter'
    version =  '0.5.0'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

dependencies {
    compile group: 'ca.uhn.hapi.fhir', name:'hapi-fhir-base', version:'2.5'
    compile group: 'ca.uhn.hapi.fhir', name: 'hapi-fhir-structures-dstu2', version: '2.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.3'
    compile group: 'org.thymeleaf', name: 'thymeleaf', version: '3.0.9.RELEASE'
    compile group: 'org.springframework', name: 'spring-web', version: '5.0.2.RELEASE'

    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'com.mashape.unirest', name:'unirest-java', version:'1.4.9'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.12'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
    compile group: 'com.google.guava', name: 'guava', version: '20.0'
    compile group: 'com.google.inject', name: 'guice', version: '3.0'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'

    testCompile group: 'junit', name:'junit', version: '4.11'
    testCompile group: 'org.mockito', name:'mockito-core', version: '2.7.22'
}

/*** code coverage configuration ***/

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    executionData = fileTree(dir: "${buildDir}/jacoco").matching {
        include '**/*.exec'
    }
}

check.finalizedBy jacocoTestReport

/*** style checking configuration ***/

checkstyle {
    sourceSets = [project.sourceSets.main]
}

project.tasks.remove(project.tasks['checkstyleTest']);

task appStartDaemon(dependsOn: 'appBeforeIntegrationTest'){
}

task appStopDaemon(dependsOn: 'appAfterIntegrationTest'){
}
